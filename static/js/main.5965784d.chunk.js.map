{"version":3,"sources":["Components/LoginForm.js","Components/App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","rememberme","onHandleChange","bind","assertThisInitialized","onSubmit","event","_event$target","target","name","value","type","checked","console","log","setState","defineProperty","preventDefault","react_default","a","createElement","className","src","alt","onChange","href","react_fontawesome_index_es","icon","Component","App","Components_LoginForm","Boolean","window","location","hostname","match","library","add","faArrowLeft","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SA6EeA,cAvEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,GACVC,SAAU,GACVC,YAAY,GAEdV,EAAKW,eAAiBX,EAAKW,eAAeC,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACtBA,EAAKc,SAAWd,EAAKc,SAASF,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KARCA,8EAUJe,GAAO,IAAAC,EACED,EAAME,OAAtBC,EADcF,EACdE,KAAMC,EADQH,EACRG,MACc,aAAtBJ,EAAME,OAAOG,OACfD,EAAQJ,EAAME,OAAOI,QACrBC,QAAQC,IAAIJ,IAGdhB,KAAKqB,SAALvB,OAAAwB,EAAA,EAAAxB,CAAA,GACGiB,EAAOC,qCAIHJ,GACPA,EAAMW,iBACNJ,QAAQC,IAAIpB,KAAKI,wCAGjB,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVC,IAAI,2JACJC,IAAI,MAGRL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAchB,SAAUX,KAAKW,UAC3Ca,EAAAC,EAAAC,cAAA,SAAOC,UAAU,qBAAjB,6BACAH,EAAAC,EAAAC,cAAA,SACET,KAAK,OACLU,UAAU,eACVZ,KAAK,WACLe,SAAU9B,KAAKQ,iBAEjBgB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,qBAAjB,YACAH,EAAAC,EAAAC,cAAA,SACET,KAAK,WACLU,UAAU,eACVZ,KAAK,WACLe,SAAU9B,KAAKQ,iBAEjBgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,SACET,KAAK,WACLF,KAAK,aACLY,UAAU,kBACVG,SAAU9B,KAAKQ,iBACd,IANL,eASAgB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAlB,WAGFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCAAmCI,KAAK,KAArD,uBACAP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcI,KAAK,KAAIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAiBC,KAAK,eAAe,IAAzE,6BAlEcC,aCaTC,MAXf,WACI,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACU,EAAD,SCAUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAAQC,IAAIC,KAEZC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5965784d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n// import \"../styles/styles.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nclass LoginForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      rememberme: false\r\n    };\r\n    this.onHandleChange = this.onHandleChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n  onHandleChange(event) {\r\n    let { name, value } = event.target;\r\n    if (event.target.type === \"checkbox\") {\r\n      value = event.target.checked;\r\n      console.log(value);\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(this.state);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"login__form-wrapper\">\r\n        <div className=\"login__img-wrapper\">\r\n          <img\r\n            className=\"login__image\"\r\n            src=\"https://images.unsplash.com/photo-1550852355-d04aff81523b?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=500&h=500&fit=crop&ixid=eyJhcHBfaWQiOjF9\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <form className=\"login__form\" onSubmit={this.onSubmit}>\r\n          <label className=\"login__input-name\">Username or Email address</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"login__input\"\r\n            name=\"username\"\r\n            onChange={this.onHandleChange}\r\n          />\r\n          <label className=\"login__input-name\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"login__input\"\r\n            name=\"password\"\r\n            onChange={this.onHandleChange}\r\n          />\r\n          <div className=\"login__btn-group\">\r\n            <div className=\"login__checkbox-wrapper\">\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"rememberme\"\r\n                className=\"login__checkbox\"\r\n                onChange={this.onHandleChange}\r\n              />{\" \"}\r\n              Remember me\r\n            </div>\r\n            <button className=\"login__login-btn\">Login</button>\r\n          </div>\r\n        </form>\r\n          <a className=\"login__link login__lost-password\" href=\"/\">Lost your password?</a>\r\n          <a className=\"login__link\" href=\"/\"><FontAwesomeIcon icon='arrow-left'/>{' '}Back to uiCookies</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport './styles/styles.scss';\r\n\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nfunction App() {\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"login__left-img\" />\r\n        <div className=\"login__primary\">\r\n          <LoginForm />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\n\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nlibrary.add(faArrowLeft);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}